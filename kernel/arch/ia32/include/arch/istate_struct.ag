# Copyright (c) 2014 Jakub Jermar 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# - The name of the author may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

{
        name : istate,

        includes : [
                {
                        guard : KERNEL,
                        include : <typedefs.h>
                },
                {
                        negative-guard: KERNEL,
                        include : <sys/types.h>
                }
        ],

        members : [

                #
                # The strange order of the GPRs is given by the requirement to use the
                # istate structure for both regular interrupts and exceptions as well
                # as for syscall handlers which use this order as an optimization.
                #

                {
                        name : edx,
                        type : uint32_t
                },
                {
                        name : ecx,
                        type : uint32_t
                },
                {
                        name : ebx,
                        type : uint32_t
                },
                {
                        name : esi,
                        type : uint32_t
                },
                {
                        name : edi,
                        type : uint32_t
                },
                {
                        name : ebp,
                        type : uint32_t
                },
                {
                        name : eax,
                        type : uint32_t
                },

                {
                        # imitation of frame pointer linkage
                        name : ebp_frame,
                        type : uint32_t
                },
                {
                        # imitation of return address linkage
                        name : eip_frame,
                        type : uint32_t
                },

                {
                        name : gs,
                        type : uint32_t
                },
                {
                        name : fs,
                        type : uint32_t
                },
                {
                        name : es,
                        type : uint32_t
                },
                {
                        name : ds,
                        type : uint32_t
                },

                {
                        # real or fake error word
                        name : error_word,
                        type : uint32_t
                },
                {
                        name : eip,
                        type : uint32_t
                },
                {
                        name : cs,
                        type : uint32_t
                },
                {
                        name : eflags,
                        type : uint32_t
                },
                {
                        # only if istate_t is from uspace
                        name : esp,
                        type : uint32_t
                },
                {
                        # only if istate_t is from uspace
                        name : ss,
                        type : uint32_t
                }
        ]
}
